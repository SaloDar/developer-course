@page "/product/{Id:guid}"
@page "/product/{Id:guid}/{Tab}"
@using AntDesign;
@using AntDesign.JsInterop
@using DeveloperCourse.SecondLesson.Common.Clients.Clients.Image
@using DeveloperCourse.SecondLesson.Common.Clients.Clients.Image.DTOs
@using DeveloperCourse.SecondLesson.Common.Clients.Clients.Price
@using DeveloperCourse.SecondLesson.Common.Clients.Clients.Price.DTOs
@using DeveloperCourse.SecondLesson.Common.Clients.Clients.Product
@using DeveloperCourse.SecondLesson.Common.Clients.Clients.Product.DTOs
@using Microsoft.JSInterop;
@using DeveloperCourse.SecondTask.Market.Shared
@inject IProductClient ProductClient
@inject IImageClient ImageClient
@inject IPriceClient PriceClient
@inject IJSRuntime JS
@inject DomEventService DomEventService

<div>
    <Tabs DefaultActiveKey="@(Tab)">
        <TabPane Key="Overview">
            <Tab>Overview</Tab>
            <ChildContent>
                <BSContainer>
                    <BSRow>
                        <BSCol>
                            <h2>@OverviewedProduct?.Name</h2>
                        </BSCol>
                    </BSRow>
                    <BSRow>
                        <BSCol>
                            <p style="font-size: small">SKU : @OverviewedProduct?.Sku</p>
                        </BSCol>
                    </BSRow>
                    <BSRow>
                        <BSCol>
                            @if (IsImagesLoaded)
                            {
                                <Spin Delay=500 size="large" Spinning="@(!CarouselIsLoaded)">
                                    <Carousel>
                                        @foreach (var image in Images ?? new List<ImageDto>())
                                        {
                                            <CarouselSlick>
                                                <div style="background-image: url(@image?.Link?.ToString());height:386px; background-size:cover; background-position: center center;"></div>
                                            </CarouselSlick>
                                        }
                                    </Carousel>
                                </Spin>
                            }
                            else
                            {
                                <img src="/icons/cloud.svg" style="height:386px; background-size:cover; background-position: center center; display: flex;margin: auto;"/>
                            }
                        </BSCol>
                    </BSRow>
                    <BSRow>
                        <BSCol>
                            <h4 style="margin: 10px 0 10px 0">Description</h4>
                            <p style="font-size: medium">@OverviewedProduct?.Description</p>
                        </BSCol>
                        <BSCol SM="3">
                            <h4 style="margin: 10px 0 10px 0">Prices</h4>
                            @if (IsPricesLoaded)
                            {
                                <BSListGroup>
                                    @foreach (var productPrice in (Prices ?? new List<PriceDto>()).Where(x => x.IsLast))
                                    {
                                        <BSListGroupItem>@productPrice?.Retail @productPrice?.Currency.ToString() </BSListGroupItem>
                                    }
                                </BSListGroup>
                            }
                            else
                            {
                                <p style="font-size: medium">Prices is not available.</p>
                            }
                        </BSCol>
                    </BSRow>
                </BSContainer>
            </ChildContent>
        </TabPane>
        <ImageTab ProductId="@(Id)" ProductPage="@(this)" OnChanged="@(StateHasChanged)"/>
        <PriceTab ProductId="@(Id)" ProductPage="@(this)" OnChanged="@(StateHasChanged)"/>
    </Tabs>
</div>

<style>
    
    .ant-spin-blur {
        opacity: .01 !important;
    }
    
    .ant-carousel .slick-slide {
        background: #dcdde1;
    }

</style>

@code {

    #region Props

    [Parameter]
    public Guid Id { get; set; }

    [Parameter]
    public string Tab
    {
        get => _tab;
        set
        {
            _tab = (value ?? string.Empty).ToLowerInvariant() switch
            {
                "price" => "Price",
                "prices" => "Price",
                "image" => "Image",
                "images" => "Image",
                _ => "Overview"
                };
        }
    }

    public bool IsImagesLoaded => Images?.Any() ?? false;

    public bool IsPricesLoaded => Prices?.Any() ?? false;

    public ProductDto OverviewedProduct;

    public ICollection<ImageDto> Images = new List<ImageDto>();

    public ICollection<PriceDto> Prices = new List<PriceDto>();

    public bool CarouselIsLoaded { get; set; }

    #endregion

    #region Fields

    private string _tab;
    
    #endregion

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            DomEventService.AddEventListener("window", "resize", s => OnCarouselLoaded(), false);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await UpdateData();

        await JS.InvokeVoidAsync("fakeResize");
    }

    private void OnCarouselLoaded()
    {
        if (!CarouselIsLoaded)
        {
            CarouselIsLoaded = true;
            StateHasChanged();
        }
    }

    private async Task UpdateData()
    {
        try
        {
            var response = await ProductClient.GetProduct(Id);

            OverviewedProduct = response.Product;
            Images = OverviewedProduct?.Images?.ToList() ?? new List<ImageDto>();
            Prices = OverviewedProduct?.Prices?.ToList() ?? new List<PriceDto>();
        }
        catch (Exception)
        {
            OverviewedProduct = null;
            Images = new List<ImageDto>();
            Prices = new List<PriceDto>();
        }
    }

}