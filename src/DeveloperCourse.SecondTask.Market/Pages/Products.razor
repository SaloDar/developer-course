@page "/products"
@inject IProductClient ProductClient
@inject IAuthService AuthService
@using DeveloperCourse.SecondTask.Market.Shared
@using DeveloperCourse.SecondLesson.Common.Clients.Clients.Product
@using DeveloperCourse.SecondLesson.Common.Clients.Clients.Product.DTOs
@using DeveloperCourse.SecondLesson.Domain.Types
@using DeveloperCourse.SecondTask.Market.Interfaces

<AntList style="min-height: 350px;" DataSource="@(ProductsCollection ?? new List<ProductDto>())" ItemLayout="@ListItemLayout.Vertical">
    <Header>
        <Title style="text-align: center;" Level="4">Products</Title>
        @if (_isAuth)
        {
            <Button Type="default" style="display: block;margin-left: auto;margin-right: 0;" OnClick="@(() => _createProductModal.Open())">
                Add product
            </Button>
        }
    </Header>
    <ChildContent Context="item">
        <Skeleton Loading="@(!IsLoaded)" Active Avatar AvatarShape="square">
            <ListItem Actions="@(new[]{_productLink(item.Id)})">
                <ListItemMeta Description="@item.Description">
                    <AvatarTemplate>
                        @if (item.Images != null && item.Images.Any(x => x.Link != null))
                        {
                            @_avatarLink(item?.Images?.FirstOrDefault()?.Link)
                        }
                        else
                        {
                            @_avatarStandard
                        }
                    </AvatarTemplate>
                    <TitleTemplate>
                        <a href="@($"product/{item.Id}")">@item.Name</a>
                    </TitleTemplate>
                </ListItemMeta>
            </ListItem>
        </Skeleton>
    </ChildContent>
</AntList>

<CreateProductModal @ref="@_createProductModal" ProductsPage="@(this)" OnChanged="@(StateHasChanged)"/>

@code {

    #region Fields

    private CreateProductModal _createProductModal;

    private bool _isAuth = false;

    private readonly RenderFragment<Guid> _productLink = context => @<a href="@($"product/{context}")">
                                                                        <Button Shape="round" Size="large">View</Button>
                                                                    </a>;

    private readonly RenderFragment<Uri> _avatarLink = context => @<Avatar Shape="square" Size="64" Src="@(context.ToString())"></Avatar>;

    private readonly RenderFragment _avatarStandard = @<Avatar Shape="square" Size="64" Icon="loading"></Avatar>;

    #endregion

    #region Props

    public ICollection<ProductDto> ProductsCollection { get; set; }

    public bool IsLoaded => ProductsCollection?.Any() ?? false;

    #endregion

    #region Private Methods

    protected override async Task OnInitializedAsync()
    {
        await UpdateData();
    }

    private async Task UpdateData()
    {
        try
        {
            var response = await ProductClient.GetProducts();

            ProductsCollection = response.Products.OrderBy(x => x.Name).ToList();

            var currentUser = await AuthService.GetCurrentUser();

            _isAuth = currentUser != null && currentUser.Roles.Contains(UserRole.Administrator);
            
            StateHasChanged();
        }
        catch (Exception)
        {
            ProductsCollection = null;
        }
    }

    #endregion

}