@page "/products"
@inject IProductService ProductService
@using DeveloperCourse.SecondTask.Market.Services.Product.DTOs
@using DeveloperCourse.SecondTask.Market.Services.Product

<AntList style="min-height: 350px;" DataSource="@(_products ?? new List<ProductDto>())" ItemLayout="@ListItemLayout.Vertical">
    <Header>
        <Title style="text-align: center;" Level="4">Products</Title>
    </Header>
    <ChildContent Context="item">
        <Skeleton Loading="@(!IsLoaded)" Active Avatar AvatarShape="square">
            <ListItem Actions="@(new[]{_productLink(item.Id)})">
                <ListItemMeta Description="@item.Description">
                    <AvatarTemplate>
                        @if (item.Images != null && item.Images.Any(x => x.Link != null))
                        {
                            @_avatarLink(item?.Images?.FirstOrDefault()?.Link)
                        }
                        else
                        {
                            @_avatarStandard
                        }
                    </AvatarTemplate>
                    <TitleTemplate>
                        <a href="@($"product/{item.Id}")">@item.Name</a>
                    </TitleTemplate>
                </ListItemMeta>
            </ListItem>
        </Skeleton>
    </ChildContent>
</AntList>

@code {

    private ICollection<ProductDto> _products;
    
    private readonly RenderFragment<Guid> _productLink = context => @<a href="@($"product/{context}")"><Button Shape="round" Size="large">View</Button></a>;

    private readonly RenderFragment<Uri> _avatarLink = context => @<Avatar Shape="square" Size="64" Src="@(context.ToString())"></Avatar>;
    
    private readonly RenderFragment _avatarStandard =  @<Avatar Shape="square" Size="64" Icon="loading"></Avatar>;

    public bool IsLoaded => _products?.Any() ?? false;

    protected override async Task OnInitializedAsync()
    {
        await UpdateData();
    }

    private async Task UpdateData()
    {
        try
        {
            var response = await ProductService.GetProducts();

            _products = response.Products.OrderBy(x => x.Name).ToList();
        }
        catch (Exception)
        {
            _products = null;
        }
    }

}