@using MatBlazor
@using Refit
@using AntDesign;
@using System.IO
@using DeveloperCourse.SecondLesson.Common.Clients.Clients.Image
@using DeveloperCourse.SecondLesson.Common.Clients.Clients.Image.DTOs
@using DeveloperCourse.SecondLesson.Domain.Types
@using DeveloperCourse.SecondTask.Market.Interfaces
@using DeveloperCourse.SecondTask.Market.Pages
@using DeveloperCourse.SecondTask.Market.Services
@inject AuthStateProvider AuthStateProvider
@inject IImageClient ImageClient

<TabPane Key="Image">
    <Tab>Images</Tab>
    <ChildContent>
        <AntList Loading="@(!IsImagesLoaded)" DataSource="@(Images ?? new List<ImageDto>())" ItemLayout="@(ListItemLayout.Horizontal)">
            <Header>
                @if (Images == null)
                {
                    <Alert Type="@AlertType.Error" Message="Image service is unavailable" ShowIcon />
                }
                else
                {
                    <AuthorizeView Roles="@nameof(UserRole.Administrator)">
                        <FileUpload Style="height: 5px;" OnChange="@FilesReady" Label="Add new image"></FileUpload>
                    </AuthorizeView>
                }
            </Header>
            <ChildContent Context="item">
                <Skeleton Loading="@(!IsImagesLoaded)" Active Avatar AvatarShape="square">
                    <ListItem>
                        <ListItemMeta Description="@(item?.Link?.ToString())">
                            <AvatarTemplate>
                                @if (item?.Link != null)
                                {
                                    @_avatarLink(item.Link)
                                }
                                else
                                {
                                    @_avatarStandard
                                }
                            </AvatarTemplate>
                            <TitleTemplate>
                                @item.Id
                            </TitleTemplate>
                        </ListItemMeta>
                    </ListItem>
                </Skeleton>
            </ChildContent>
        </AntList>
    </ChildContent>
</TabPane>

@code {

    #region Props

    [Parameter]
    public Guid ProductId { get; set; }

    [Parameter]
    public Product ProductPage { get; set; }

    [Parameter]
    public EventCallback OnChanged { get; set; }

    public ICollection<ImageDto> Images = new List<ImageDto>();

    public bool IsImagesLoaded => Images?.Any() ?? false;

    #endregion

    #region Fields
    
    private readonly RenderFragment<Uri> _avatarLink = context => @<Avatar Shape="square" Size="64" Src="@(context.ToString())"></Avatar>;

    private readonly RenderFragment _avatarStandard = @<Avatar Shape="square" Size="64" Icon="loading"></Avatar>;
    
    #endregion

    #region Ovveriden Methods
    
    protected override void OnParametersSet()
    {
        AuthStateProvider.AuthenticationStateChanged += (state) =>
        {
            StateHasChanged();
        };
        
        base.OnParametersSet();
    }

    protected override async Task OnInitializedAsync()
    {
        await UpdateData();
    }

    #endregion
    
    #region Private Methods

    private async Task FilesReady(IMatFileUploadEntry[] files)
    {
        var file = files.FirstOrDefault();

        if (file != null)
        {
            var fileStream = new MemoryStream();
            await file.WriteToStreamAsync(fileStream);
            var inputFile = new StreamPart(new MemoryStream(fileStream.ToArray()), file.Name, file.Type);
            var imageResponse = await ImageClient.CreateImage(ProductId.ToString(), inputFile);

            if (imageResponse?.Image != null)
            {
                Images.Add(imageResponse.Image);
                await OnChanged.InvokeAsync(null);
            }
        }
    }
    
    private async Task UpdateData()
    {
        try
        {
            var response = await ImageClient.GetImages(ProductId);
            
            Images = response?.Images?.ToList() ?? new List<ImageDto>();
        }
        catch (Exception)
        {
            Images = null;
        }
    }
    
    #endregion

}